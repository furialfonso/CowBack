// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "docker-go-project/api/dto/request"

	response "docker-go-project/api/dto/response"
)

// IGroupService is an autogenerated mock type for the IGroupService type
type IGroupService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, groupDTO
func (_m *IGroupService) Create(ctx context.Context, groupDTO request.GroupRequest) error {
	ret := _m.Called(ctx, groupDTO)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.GroupRequest) error); ok {
		r0 = rf(ctx, groupDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, code
func (_m *IGroupService) Delete(ctx context.Context, code string) error {
	ret := _m.Called(ctx, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *IGroupService) GetAll(ctx context.Context) ([]response.GroupResponse, error) {
	ret := _m.Called(ctx)

	var r0 []response.GroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]response.GroupResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []response.GroupResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.GroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCode provides a mock function with given fields: ctx, code
func (_m *IGroupService) GetByCode(ctx context.Context, code string) (response.GroupResponse, error) {
	ret := _m.Called(ctx, code)

	var r0 response.GroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (response.GroupResponse, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) response.GroupResponse); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(response.GroupResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDebtByCode provides a mock function with given fields: ctx, groupDTO
func (_m *IGroupService) UpdateDebtByCode(ctx context.Context, groupDTO request.GroupRequest) error {
	ret := _m.Called(ctx, groupDTO)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.GroupRequest) error); ok {
		r0 = rf(ctx, groupDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIGroupService creates a new instance of IGroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGroupService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGroupService {
	mock := &IGroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
