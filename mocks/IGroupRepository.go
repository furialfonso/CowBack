// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	model "docker-go-project/pkg/repository/model"

	mock "github.com/stretchr/testify/mock"
)

// IGroupRepository is an autogenerated mock type for the IGroupRepository type
type IGroupRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, code
func (_m *IGroupRepository) Create(ctx context.Context, code string) (int64, error) {
	ret := _m.Called(ctx, code)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupByCode provides a mock function with given fields: ctx, code
func (_m *IGroupRepository) GetGroupByCode(ctx context.Context, code string) (model.Group, error) {
	ret := _m.Called(ctx, code)

	var r0 model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Group, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Group); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(model.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroups provides a mock function with given fields: ctx
func (_m *IGroupRepository) GetGroups(ctx context.Context) ([]model.Group, error) {
	ret := _m.Called(ctx)

	var r0 []model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Group, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Group); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroupDebtByCode provides a mock function with given fields: ctx, group
func (_m *IGroupRepository) UpdateGroupDebtByCode(ctx context.Context, group model.Group) error {
	ret := _m.Called(ctx, group)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Group) error); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIGroupRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIGroupRepository creates a new instance of IGroupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIGroupRepository(t mockConstructorTestingTNewIGroupRepository) *IGroupRepository {
	mock := &IGroupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
